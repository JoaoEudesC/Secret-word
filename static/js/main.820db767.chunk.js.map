{"version":3,"sources":["data/words.js","Componentes/StartScreen.jsx","Componentes/Game.jsx","Componentes/GameOver.jsx","App.js","reportWebVitals.js","index.js"],"names":["wordsList","carro","Fruta","Corpo","Computador","programação","alimento","StartScreen","_ref","startGame","react_default","a","createElement","className","onClick","Game","verifyLetter","pickedCategory","pickedWord","letters","guessedLetters","wrongLetters","guesses","score","_useState","useState","_useState2","Object","slicedToArray","letter","setLetter","letterInputRef","useRef","map","i","includes","key","onSubmit","e","preventDefault","current","focus","type","name","maxLength","onChange","target","value","ref","required","GameOver","retry","stages","id","guessesQty","App","gameStage","setGameStage","_useState3","words","_useState5","_useState6","setPickedWord","_useState7","_useState8","setPickedCategory","_useState9","_useState10","setLetters","_useState11","_useState12","setGuessedLetters","_useState13","_useState14","setWrongLetters","_useState15","_useState16","setGuesses","_useState17","_useState18","setScore","pickWordandCategory","useCallback","categories","keys","category","Math","floor","random","length","word","clearLetterStates","_pickWordandCategory","wordLetters","split","l","toLowerCase","useEffect","uniqueLetters","toConsumableArray","Set","actualScore","Componentes_StartScreen","Componentes_Game","normalizedLetter","actualGuessedLetters","concat","actualWrongLetters","actualGuesses","Componentes_GameOver","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.820db767.chunk.js","sourcesContent":["export const wordsList = {\n    carro:[\"Motor\" , \"Porta\" , \"Capô\" , \"Pneu\" , \"Antena\"],\n    Fruta:[\"Banana\" , \"Maçã\" , \"Pêra\" , \"Mamão\" , \"Laranja\"],\n    Corpo:[\"Braço\" , \"Perna\" , \"Cérebro\" , \"Pescoço\" , \"Olhos\"],\n    Computador:[\"Mouse\", \"Teclado\", \"Monitor\", \"Gabinete\"],\n    programação:[\"Linguagem\", \"Framework\", \"JavaScript\", \"React\"],\n    alimento:[\"Arroz\", \"Feijão\", \"Carne\", \"Leite\",  \"Ovo\"]\n}","import \"../componentes.css/StartScreen.css\"\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nconst StartScreen = ({startGame})=>{\n    return(\n        <div className=\"start\">\n            <h1>Secret Word</h1>\n            <p>Clique no botão abaixo para começar a jogar</p>\n            <button onClick={startGame}>Começar o jogo</button>\n        </div>\n    )\n}\n\nexport default StartScreen","import { useState, useRef } from 'react'\nimport '../componentes.css/Game.css'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nconst Game = ({\n        verifyLetter,\n        pickedWord, \n        pickedCategory, \n        letters, \n        guessedLetters, \n        wrongLetters,\n        guesses,\n        score \n    })=>{\n        const [letter, setLetter] = useState(\"\");\n        const letterInputRef = useRef(null)\n        \n        const handleSubmit = (e)=>{\n            e.preventDefault()\n            verifyLetter(letter)\n            setLetter(\"\")\n            letterInputRef.current.focus();\n        }\n\n\n    return(\n        <div className='game'>\n            <p className='points'>\n                <span>Pontuação: {score}</span>\n            </p>\n            <h1>Advinhe a palavra </h1>\n            <h3 className='tip'>\n                Dica sobre a palavra: <span>{pickedCategory}</span>\n            </h3>\n            <p>Você ainda tem {guesses} tentativas(s).</p>\n            <div className=\"wordContainer\">\n                {letters.map((letter, i)=>(\n                    guessedLetters.includes(letter)?(\n                        <span key={i} className='letter'>\n                            {letter}\n                        </span>\n                        \n                        ): (\n                            <span key={i} className='blankSquare'></span>\n                        )\n                ))}\n            </div>\n            <div className=\"letterContainer\">\n                <p>Tente advinhar uma letra da palavra:</p>\n                <form onSubmit={handleSubmit}>\n                    <input type=\"text\" name=\"letter\" maxLength=\"1\"  onChange={(e)=>setLetter(e.target.value) } value={letter} ref={letterInputRef}  required />\n                    <button>Jogar!</button>\n                </form>\n            </div>\n            <div className=\"wrongLettersContainer\">\n                <p>Letras já utilizadas:</p>\n                {wrongLetters.map((letter, i)=>(\n                    <span key={i}>{letter}, </span>\n                ))}\n            </div>\n        </div>\n    )\n}\n\n\nexport default Game","import \"../componentes.css/GameOver.css\"\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nconst GameOver = ({retry , score})=>{\n    return(\n        <div>\n            <h1>Game Over</h1>\n            <h2>A sua pontuação foi: <span>{score}</span></h2>\n            <button onClick={retry}>Resetar jogo</button>\n        </div>\n    )\n}\n\n\nexport default GameOver","//CSS\nimport './App.css';\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\n//React\nimport { useCallback , useEffect , useState } from 'react';\n\n//data\nimport {wordsList} from \"./data/words\";\n\n\n//Importando componentes\nimport StartScreen from './Componentes/StartScreen';\nimport Game from './Componentes/Game';\nimport GameOver from './Componentes/GameOver';\n\nconst stages = [\n  {id: 1, name: \"start\"},\n  {id: 2, name: \"game\"},\n  {id:3, name: \"end\"}\n]\n\nconst guessesQty = 3\n\nfunction App() {\n  const [gameStage , setGameStage] = useState(stages[0].name);\n  const [words] = useState(wordsList)\n  const [pickedWord, setPickedWord ] = useState(\"\")\n  const [pickedCategory , setPickedCategory ] = useState(\"\")\n  const [letters , setLetters] = useState([])\n  const[guessedLetters, setGuessedLetters] = useState([])\n  const [wrongLetters, setWrongLetters ] = useState([])\n  const [guesses , setGuesses] = useState(guessesQty)\n  const [score , setScore] = useState(0)\n\n\n  const pickWordandCategory =useCallback(()=>{\n    //pick a random category\n    const categories = Object.keys(words)\n    const category = categories[Math.floor(Math.random() * Object.keys(categories).length)];\n    \n\n    // pick a random word\n    const word = words[category][Math.floor(Math.random() * words[category].length)]\n    \n    return {word, category}\n  },[words]);\n\n\n\n  //starts the secret word game\n  \n  const startGame = useCallback(()=>{\n    // clear all letters\n    clearLetterStates()\n    //pick word and pick category\n    const {word , category} = pickWordandCategory();\n    \n\n    //create an array of letters\n    let wordLetters = word.split(\"\")\n    wordLetters = wordLetters.map((l) => l.toLowerCase());\n\n    \n    \n\n    //fill states\n    setPickedWord(word);\n    setPickedCategory(category);\n    setLetters(wordLetters);\n\n    setGameStage(stages[1].name)\n  }, [pickWordandCategory]);\n  \n  \n  // process the letter input\n  const verifyLetter = (letter)=>{\n    const normalizedLetter = letter.toLowerCase()\n\n\n    //check if letter has already been utilized\n\n    if(guessedLetters.includes(normalizedLetter) || wrongLetters.includes(normalizedLetter)){\n      return;\n    }\n    //push guessed letter or remove a guess\n    if(letters.includes(normalizedLetter)){\n      setGuessedLetters((actualGuessedLetters)=>[\n        ...actualGuessedLetters,\n        normalizedLetter\n      ] )\n    }\n    else{\n      setWrongLetters((actualWrongLetters)=>[\n        ...actualWrongLetters,\n        normalizedLetter\n      ]);\n      setGuesses((actualGuesses) => actualGuesses - 1 )\n  \n    }\n    \n    \n  };\n\n  const clearLetterStates = ()=>{\n    setGuessedLetters([]);\n    setWrongLetters([]);\n\n  };\n  //check if guesses ended\n  useEffect(()=>{\n    if(guesses <= 0){\n      //reset all states\n        clearLetterStates()\n\n\n\n      setGameStage(stages[2].name)\n    }\n  }, [guesses]);\n\n  //check win condition\n  useEffect(()=>{\n    const uniqueLetters=[...new Set(letters)]\n\n    //win condition\n    if(guessedLetters.length === uniqueLetters.length){\n      //add score\n      setScore((actualScore)=> actualScore += 100)\n\n      //restart game with new word\n      startGame();\n\n    }\n\n  }, [guessedLetters, letters, startGame])\n\n    \n  \n\n  //restarts the game\n  const retry = ()=>{\n    setScore(0);\n    setGuesses(guessesQty);\n    setGameStage(stages[0].name)\n  }\n\n  return (\n    <div className=\"App\">\n      {gameStage === \"start\" && <StartScreen startGame={startGame}/>}\n      {gameStage === \"game\" && \n      \n      <Game \n      verifyLetter={verifyLetter} \n      pickedWord={pickedWord} \n      pickedCategory={pickedCategory} \n      letters={letters} \n      guessedLetters={guessedLetters}\n      wrongLetters={wrongLetters}\n      guesses={guesses}\n      score={score}\n      />\n      \n      }\n      \n      {gameStage === \"end\" && <GameOver retry={retry} score={score} />}\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}